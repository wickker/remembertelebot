// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: jobs.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (telegram_chat_id, is_recurring, message, schedule, name, river_job_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, telegram_chat_id, is_recurring, river_job_id, message, schedule, name, created_at, updated_at, deleted_at
`

type CreateJobParams struct {
	TelegramChatID int64
	IsRecurring    bool
	Message        string
	Schedule       string
	Name           string
	RiverJobID     pgtype.Int8
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.TelegramChatID,
		arg.IsRecurring,
		arg.Message,
		arg.Schedule,
		arg.Name,
		arg.RiverJobID,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.TelegramChatID,
		&i.IsRecurring,
		&i.RiverJobID,
		&i.Message,
		&i.Schedule,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteJobByID = `-- name: DeleteJobByID :one
UPDATE jobs
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, telegram_chat_id, is_recurring, river_job_id, message, schedule, name, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteJobByID(ctx context.Context, id int32) (Job, error) {
	row := q.db.QueryRow(ctx, deleteJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.TelegramChatID,
		&i.IsRecurring,
		&i.RiverJobID,
		&i.Message,
		&i.Schedule,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteScheduledJobByRiverJobID = `-- name: DeleteScheduledJobByRiverJobID :one
UPDATE jobs
SET deleted_at = NOW()
WHERE river_job_id = $1
AND is_recurring = false
RETURNING id, telegram_chat_id, is_recurring, river_job_id, message, schedule, name, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteScheduledJobByRiverJobID(ctx context.Context, riverJobID pgtype.Int8) (Job, error) {
	row := q.db.QueryRow(ctx, deleteScheduledJobByRiverJobID, riverJobID)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.TelegramChatID,
		&i.IsRecurring,
		&i.RiverJobID,
		&i.Message,
		&i.Schedule,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActiveJobsByTelegramChatID = `-- name: GetActiveJobsByTelegramChatID :many
SELECT id, telegram_chat_id, is_recurring, message, schedule, name, river_job_id
FROM jobs
WHERE telegram_chat_id = $1
AND deleted_at IS NULL
`

type GetActiveJobsByTelegramChatIDRow struct {
	ID             int32
	TelegramChatID int64
	IsRecurring    bool
	Message        string
	Schedule       string
	Name           string
	RiverJobID     pgtype.Int8
}

func (q *Queries) GetActiveJobsByTelegramChatID(ctx context.Context, telegramChatID int64) ([]GetActiveJobsByTelegramChatIDRow, error) {
	rows, err := q.db.Query(ctx, getActiveJobsByTelegramChatID, telegramChatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveJobsByTelegramChatIDRow
	for rows.Next() {
		var i GetActiveJobsByTelegramChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TelegramChatID,
			&i.IsRecurring,
			&i.Message,
			&i.Schedule,
			&i.Name,
			&i.RiverJobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActiveRecurringJobs = `-- name: GetActiveRecurringJobs :many
SELECT id, telegram_chat_id, is_recurring, message, schedule, name, river_job_id
FROM jobs
WHERE is_recurring = true
AND deleted_at IS NULL
`

type GetActiveRecurringJobsRow struct {
	ID             int32
	TelegramChatID int64
	IsRecurring    bool
	Message        string
	Schedule       string
	Name           string
	RiverJobID     pgtype.Int8
}

func (q *Queries) GetActiveRecurringJobs(ctx context.Context) ([]GetActiveRecurringJobsRow, error) {
	rows, err := q.db.Query(ctx, getActiveRecurringJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveRecurringJobsRow
	for rows.Next() {
		var i GetActiveRecurringJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.TelegramChatID,
			&i.IsRecurring,
			&i.Message,
			&i.Schedule,
			&i.Name,
			&i.RiverJobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, telegram_chat_id, is_recurring, message, schedule, name, river_job_id
FROM jobs
WHERE id = $1
AND deleted_at IS NULL
`

type GetJobByIDRow struct {
	ID             int32
	TelegramChatID int64
	IsRecurring    bool
	Message        string
	Schedule       string
	Name           string
	RiverJobID     pgtype.Int8
}

func (q *Queries) GetJobByID(ctx context.Context, id int32) (GetJobByIDRow, error) {
	row := q.db.QueryRow(ctx, getJobByID, id)
	var i GetJobByIDRow
	err := row.Scan(
		&i.ID,
		&i.TelegramChatID,
		&i.IsRecurring,
		&i.Message,
		&i.Schedule,
		&i.Name,
		&i.RiverJobID,
	)
	return i, err
}

const updateRiverJobID = `-- name: UpdateRiverJobID :one
UPDATE jobs
SET river_job_id = $1
WHERE id = $2
RETURNING id, telegram_chat_id, is_recurring, river_job_id, message, schedule, name, created_at, updated_at, deleted_at
`

type UpdateRiverJobIDParams struct {
	RiverJobID pgtype.Int8
	ID         int32
}

func (q *Queries) UpdateRiverJobID(ctx context.Context, arg UpdateRiverJobIDParams) (Job, error) {
	row := q.db.QueryRow(ctx, updateRiverJobID, arg.RiverJobID, arg.ID)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.TelegramChatID,
		&i.IsRecurring,
		&i.RiverJobID,
		&i.Message,
		&i.Schedule,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
